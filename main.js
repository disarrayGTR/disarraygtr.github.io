// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
class AutomationGame {
    constructor() {
        this.telegram = null;
        this.config = null;
        this.game = null;
        this.isInitialized = false;
    }
    
    createAudioContext() {
        // –°–æ–∑–¥–∞–µ–º AudioContext —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        let audioContext = null;

        const createContext = () => {
            if (!audioContext) {
                try {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    if (audioContext.state === 'suspended') {
                        audioContext.resume();
                    }
                } catch (e) {
                    console.warn('AudioContext –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                }
            }
            return audioContext;
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        const enableAudio = () => {
            createContext();
            document.removeEventListener('touchstart', enableAudio);
            document.removeEventListener('touchend', enableAudio);
            document.removeEventListener('mousedown', enableAudio);
            document.removeEventListener('keydown', enableAudio);
        };

        document.addEventListener('touchstart', enableAudio);
        document.addEventListener('touchend', enableAudio);
        document.addEventListener('mousedown', enableAudio);
        document.addEventListener('keydown', enableAudio);

        return createContext();
    }

    init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            this.telegram = initTelegram();
            
            console.log('‚úÖ Telegram WebApp initialized successfully');
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram
            this.trackEvent('telegram_webapp_init', {
                version: this.telegram?.version || 'unknown',
                isTelegram: !!this.telegram,
                userId: this.telegram?.initDataUnsafe?.user?.id || null
            });
        
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Phaser —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const isTelegram = !!(window.Telegram && window.Telegram.WebApp);

            this.config = {
                type: Phaser.AUTO,
                width: GAME_CONFIG.width,
                height: GAME_CONFIG.height,
                parent: 'game-container',
                backgroundColor: '#ffffff',
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                render: {
                    antialias: true,
                    pixelArt: false,
                    roundPixels: false,
                    transparent: false,
                    clearBeforeRender: true,
                    preserveDrawingBuffer: false,
                    premultipliedAlpha: true,
                    failIfMajorPerformanceCaveat: false,
                    powerPreference: 'high-performance',
                    batchSize: 4096
                },
                physics: {
                    default: 'arcade',
                    arcade: {
                        gravity: { y: 0 },
                        debug: false
                    }
                },
                audio: {
                    disableWebAudio: false,
                    context: this.createAudioContext()
                },
                scene: [Scene1, Scene2, Scene3, Scene4, Scene5],
                scale: {
                    mode: Phaser.Scale.FIT,
                    autoCenter: Phaser.Scale.CENTER_BOTH,
                    width: GAME_CONFIG.width,
                    height: GAME_CONFIG.height,
                    resolution: window.devicePixelRatio || 1,
                    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    min: {
                        width: 320,
                        height: 240
                    },
                    max: {
                        width: isMobile ? 800 : 1200,
                        height: isMobile ? 600 : 900
                    }
                },
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                fps: {
                    target: isMobile ? 30 : 60, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                    forceSetTimeOut: isMobile
                }
            };
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
            this.game = new Phaser.Game(this.config);

            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–Ω–≤–∞—Å–∞ –¥–ª—è —á–µ—Ç–∫ÔøΩÔøΩ—Å—Ç–∏
            this.optimizeCanvas();
            
            // –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingElement = document.getElementById('loading');
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }
            
            this.isInitialized = true;
            console.log('üöÄ Game app fully initialized with Telegram integration');

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.setupPerformanceMonitoring();

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
            this.trackGameStart();
            
        } catch (error) {
            console.error('‚ùå Error initializing game:', error);
            this.handleInitError(error);
        }
    }
    
    handleInitError(error) {
        const loadingElement = document.getElementById('loading');
        if (loadingElement) {
            loadingElement.innerHTML = `
                <div style="color: #ff4444; text-align: center;">
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                    <button onclick="window.location.reload()" style="
                        padding: 10px 20px;
                        background: #007acc;
                        color: white;
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                    ">–û–±–Ω–æ–≤–∏—Ç—å</button>
                </div>
            `;
        }
        
        this.trackEvent('game_init_error', {
            error: error.message,
            stack: error.stack
        });
    }
    
    trackGameStart() {
        const userData = {
            userId: this.telegram?.initDataUnsafe?.user?.id || null,
            username: this.telegram?.initDataUnsafe?.user?.username || null,
            isWebApp: !!this.telegram
        };
        
        console.log('üìä Game start logged (no chat_id):', userData);
        
        this.trackEvent('game_start', userData);
    }

    optimizeCanvas() {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–Ω–≤–∞—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setTimeout(() => {
            const canvas = this.game.canvas;
            if (canvas) {
                const ctx = canvas.getContext('2d') || canvas.getContext('webgl') || canvas.getContext('webgl2');

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º DPI
                const rect = canvas.getBoundingClientRect();
                const dpr = window.devicePixelRatio || 1;

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS —Ä–∞–∑–º–µ—ÄÔøΩÔøΩ
                canvas.style.width = rect.width + 'px';
                canvas.style.height = rect.height + 'px';

                // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
                canvas.style.imageRendering = 'crisp-edges';
                canvas.style.imageRendering = '-moz-crisp-edges';
                canvas.style.imageRendering = '-webkit-optimize-contrast';
                canvas.style.imageRendering = 'optimize-contrast';
                canvas.style.imageRendering = 'pixelated';

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
                canvas.style.msInterpolationMode = 'nearest-neighbor';

                console.log('üé® Canvas optimized for crisp rendering');
            }
        }, 100);
    }

    setupPerformanceMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const isTelegram = !!(window.Telegram && window.Telegram.WebApp);

        if (isMobile || isTelegram) {
            console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö');

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö tweens
            let tweenCount = 0;
            const maxTweens = 10;

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
            const originalTweensAdd = this.game.tweens.add;
            this.game.tweens.add = (config) => {
                if (tweenCount < maxTweens) {
                    tweenCount++;
                    const tween = originalTweensAdd.call(this.game.tweens, config);

                    // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    tween.on('complete', () => tweenCount--);
                    tween.on('stop', () => tweenCount--);

                    return tween;
                } else {
                    console.warn('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–Ω–∏–º–∞—Ü–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    return null;
                }
            };

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
            let lastTime = performance.now();
            let frameCount = 0;

            const checkPerformance = () => {
                const currentTime = performance.now();
                frameCount++;

                if (currentTime - lastTime >= 2000) { // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));

                    if (fps < 20) {
                        console.warn(`‚ö†Ô∏è –ù–∏–∑–∫–∏–π FPS: ${fps}. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–∏—Å–∞–Ω–∏–µ.`);

                        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –Ω–∏–∑–∫–æ–º FPS
                        this.game.tweens.killAll();
                        tweenCount = 0;
                    }

                    frameCount = 0;
                    lastTime = currentTime;
                }

                requestAnimationFrame(checkPerformance);
            };

            requestAnimationFrame(checkPerformance);
        }
    }

    trackEvent(event, data = {}) {
        const eventData = {
            event,
            timestamp: Date.now(),
            userAgent: navigator.userAgent,
            isTelegram: !!this.telegram,
            userId: this.telegram?.initDataUnsafe?.user?.id || null,
            ...data
        };
        
        console.log('üìä Event tracked:', eventData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try {
            const events = JSON.parse(localStorage.getItem('game-events') || '[]');
            events.push(eventData);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–±—ã—Ç–∏–π
            if (events.length > 100) {
                events.splice(0, events.length - 100);
            }
            localStorage.setItem('game-events', JSON.stringify(events));
        } catch (e) {
            console.warn('Could not save event to localStorage:', e);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç
    async sendToTelegram(data) {
        if (!this.telegram) {
            console.warn('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        try {
            const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∏–≥—Ä—ã!\n\n` +
                          `üë§ –ò–º—è: ${data.name}\n` +
                          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
                          `üìß Email: ${data.email}\n` +
                          `üéÆ –ò—Å—Ç–æ—á–Ω–∏–∫: –ò–≥—Ä–∞ "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ø–∞—Å—ë—Ç –±–∏–∑–Ω–µ—Å"\n` +
                          `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram WebApp
            this.telegram.sendData(JSON.stringify({
                type: 'lead',
                data: data,
                message: message
            }));
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            return false;
        }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ÔøΩÔøΩ–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ HTTP API
    async sendToTelegramAPI(data) {
        const botToken = GAME_CONFIG.telegram.botToken;
        const chatId = GAME_CONFIG.telegram.chatId || '@SavingBusinessBot'; // –∏–ª–∏ ID —á–∞—Ç–∞
        
        const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∏–≥—Ä—ã!\n\n` +
                       `üë§ –ò–º—è: ${data.name}\n` +
                       `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
                       `üìß Email: ${data.email}\n` +
                       `üéÆ –ò—Å—Ç–æ—á–Ω–∏–∫: –ò–≥—Ä–∞ "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ø–∞—Å—ë—Ç –±–∏–∑–Ω–µ—Å"\n` +
                       `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
        
        try {
            const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            
            if (response.ok) {
                console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
                return true;
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram API');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
            return false;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–≥—Ä—ã
let automationGame;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º JavaScript –æ—à–∏–±–∫–∏
    if (automationGame) {
        automationGame.trackEvent('javascript_error', {
            message: event.error?.message || event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
        });
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ ÔøΩÔøΩ–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    automationGame = new AutomationGame();
    automationGame.init();
});

// –û–±ÔøΩÔøΩ–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    if (automationGame && automationGame.game) {
        automationGame.game.scale.refresh();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.automationGame = automationGame;
