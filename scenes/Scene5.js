class Scene5 extends Phaser.Scene {
    constructor() {
        super({ key: 'Scene5' });
    }

    preload() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ü–µ–Ω—ã
        this.load.image('final-bg', 'data:image/svg+xml;base64,' + btoa(`
            <svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <linearGradient id="finalGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#007acc;stop-opacity:0.1" />
                        <stop offset="100%" style="stop-color:#ff6b35;stop-opacity:0.1" />
                    </linearGradient>
                </defs>
                <rect width="800" height="600" fill="url(#finalGrad)"/>
                <circle cx="400" cy="300" r="200" fill="none" stroke="#007acc" stroke-width="2" opacity="0.3"/>
                <circle cx="400" cy="300" r="150" fill="none" stroke="#ff6b35" stroke-width="2" opacity="0.4"/>
                <circle cx="400" cy="300" r="100" fill="none" stroke="#28a745" stroke-width="2" opacity="0.5"/>
            </svg>
        `));
    }

    create() {
        const { width, height } = this.scale;
        
        // –§–æ–Ω
        this.add.image(width/2, height/2, 'final-bg').setDisplaySize(width, height);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.add.text(width/2, 100, GAME_CONFIG.texts.scene5.title, {
            fontSize: '28px',
            fontFamily: 'Arial, sans-serif',
            fill: '#333',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        this.add.text(width/2, 160, GAME_CONFIG.texts.scene5.description, {
            fontSize: '18px',
            fontFamily: 'Arial, sans-serif',
            fill: '#555',
            align: 'center',
            lineSpacing: 8
        }).setOrigin(0.5);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        this.createCallToAction(width, height);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–Ω–∞
        this.createBackgroundAnimation();
    }
    
    createCallToAction(width, height) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è CTA
        const ctaContainer = this.add.container(width/2, height/2 + 50);
        
        // –§–æ–Ω –¥–ª—è CTA
        const ctaBg = this.add.rectangle(0, 0, 350, 200, 0xffffff, 0.95)
            .setStrokeStyle(3, 0x007acc);
        ctaContainer.add(ctaBg);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ CTA
        const ctaTitle = this.add.text(0, -70, '–ü–æ–ª—É—á–∏—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!', {
            fontSize: '16px',
            fontFamily: 'Arial, sans-serif',
            fill: '#007acc',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        ctaContainer.add(ctaTitle);
        
        // –°–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
        const benefits = [
            '‚úì –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –¥–æ 150%',
            '‚úì –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ 30 000‚ÇΩ/–º–µ—Å',
            '‚úì –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è 24/7',
            '‚úì –ë—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å'
        ];
        
        benefits.forEach((benefit, index) => {
            const benefitText = this.add.text(-120, -30 + index * 20, benefit, {
                fontSize: '12px',
                fontFamily: 'Arial, sans-serif',
                fill: '#28a745'
            }).setOrigin(0, 0.5);
            ctaContainer.add(benefitText);
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
        const formBtn = this.add.rectangle(0, 70, 200, 50, 0xff6b35)
            .setInteractive()
            .on('pointerdown', () => this.showLeadForm())
            .on('pointerover', () => formBtn.setFillStyle(0xdd5530))
            .on('pointerout', () => formBtn.setFillStyle(0xff6b35));
        ctaContainer.add(formBtn);
        
        const formBtnText = this.add.text(0, 70, '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', {
            fontSize: '16px',
            fontFamily: 'Arial, sans-serif',
            fill: '#fff',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        ctaContainer.add(formBtnText);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è CTA
        ctaContainer.setAlpha(0).setScale(0.8);
        this.tweens.add({
            targets: ctaContainer,
            alpha: 1,
            scale: 1,
            duration: 800,
            ease: 'Back.easeOut'
        });
        
        // –ü—É–ª—å—Å–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.tweens.add({
            targets: formBtn,
            scale: { from: 1, to: 1.05 },
            duration: 1500,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
    }
    
    createBackgroundAnimation() {
        // –ü–ª–∞–≤–∞—é—â–∏–µ –∏–∫–æ–Ω–∫–∏
        const icons = ['üí∞', 'üìà', 'ü§ñ', '‚ö°', 'üéØ', 'üí™'];
        
        icons.forEach((icon, index) => {
            this.time.delayedCall(index * 500, () => {
                const x = Phaser.Math.Between(50, this.scale.width - 50);
                const y = Phaser.Math.Between(50, this.scale.height - 50);
                
                const iconText = this.add.text(x, y, icon, {
                    fontSize: '24px'
                }).setAlpha(0.6);
                
                // –ü–ª–∞–≤–∞—é—â–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                this.tweens.add({
                    targets: iconText,
                    y: y + Phaser.Math.Between(-30, 30),
                    duration: Phaser.Math.Between(2000, 4000),
                    yoyo: true,
                    repeat: -1,
                    ease: 'Sine.easeInOut'
                });
                
                this.tweens.add({
                    targets: iconText,
                    alpha: { from: 0.6, to: 0.3 },
                    duration: Phaser.Math.Between(1500, 3000),
                    yoyo: true,
                    repeat: -1
                });
            });
        });
    }
    
    showLeadForm() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        this.cameras.main.fadeOut(300, 0, 0, 0);
        
        this.cameras.main.once('camerafadeoutcomplete', () => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML —Ñ–æ—Ä–º—É
            document.getElementById('leadForm').style.display = 'block';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã
            if (window.initLeadForm) {
                window.initLeadForm();
            }
        });
    }
}
