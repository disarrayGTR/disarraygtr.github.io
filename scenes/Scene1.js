class Scene1 extends Phaser.Scene {
    constructor() {
        super({ key: 'Scene1' });
        this.chaosElements = [];
    }

    preload() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.load.image('office-bg', 'assets/bg/office.png');
        this.load.image('player', 'assets/characters/player.png');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ö–∞–æ—Å–∞
        this.load.image('notification', 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(`
            <svg width="40" height="40" xmlns="http://www.w3.org/2000/svg">
                <circle cx="20" cy="20" r="18" fill="#ff4444" stroke="#fff" stroke-width="2"/>
                <text x="20" y="26" font-family="Arial" font-size="24" text-anchor="middle" fill="#fff">!</text>
            </svg>
        `));
        
        this.load.image('message-bubble', 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(`
            <svg width="60" height="40" xmlns="http://www.w3.org/2000/svg">
                <ellipse cx="30" cy="20" rx="28" ry="18" fill="#fff" stroke="#ddd" stroke-width="2"/>
                <polygon points="15,35 25,25 20,25" fill="#fff" stroke="#ddd" stroke-width="1"/>
                <text x="30" y="25" font-family="Arial" font-size="12" text-anchor="middle" fill="#666">?</text>
            </svg>
        `));
    }

    create() {
        const { width, height } = this.scale;
        
        // –§–æ–Ω –æ—Ñ–∏—Å–∞
        const bg = this.add.image(width/2, height/2, 'office-bg');
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ–æ–Ω —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –≤–µ—Å—å —ç–∫—Ä–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        const scaleX = width / bg.width;
        const scaleY = height / bg.height;
        const scale = Math.max(scaleX, scaleY);
        bg.setScale(scale);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ü–µ–Ω—Ç—Ä —Å—Ü–µ–Ω—ã, –≤—ã–≥–ª—è–¥—è—â–µ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω—ã–º
        const player = this.add.image(width/2, height * 0.7, 'player');
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞
        const playerScale = Math.min(width / 600, height / 800) * 0.3;
        player.setScale(playerScale);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç–∏" –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.tweens.add({
            targets: player,
            rotation: { from: -0.1, to: 0.1 },
            duration: 1500,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(width/2, height * 0.1, GAME_CONFIG.texts.scene1.title, {
            fontSize: Math.min(width, height) * 0.05 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#2c3e50',
            fontStyle: 'bold',
            stroke: '#fff',
            strokeThickness: 2
        }).setOrigin(0.5);
        
        // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        this.add.text(width/2, height * 0.2, GAME_CONFIG.texts.scene1.description, {
            fontSize: Math.min(width, height) * 0.03 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#34495e',
            align: 'center',
            lineSpacing: 8,
            stroke: '#fff',
            strokeThickness: 1
        }).setOrigin(0.5);
        
        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ö–∞–æ—Å–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        this.createChaosAnimation();
        
        // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        this.createChoiceButtons(width, height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏
        this.createUrgencyEffect();
    }
    
    createChaosAnimation() {
        const { width, height } = this.scale;
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ª–µ—Ç–∞—é—â–∏–µ –≤–æ–∫—Ä—É–≥
        for (let i = 0; i < 8; i++) {
            this.time.delayedCall(i * 300, () => {
                const notification = this.add.image(
                    Phaser.Math.Between(50, width - 50),
                    Phaser.Math.Between(height * 0.3, height * 0.6),
                    'notification'
                );
                
                const scale = Phaser.Math.Between(6, 12) / 10;
                notification.setScale(scale);
                notification.setAlpha(0);
                
                this.chaosElements.push(notification);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –¥–≤–∏–∂–µ–Ω–∏—è
                this.tweens.add({
                    targets: notification,
                    alpha: 1,
                    duration: 300,
                    ease: 'Power2'
                });
                
                this.tweens.add({
                    targets: notification,
                    x: notification.x + Phaser.Math.Between(-50, 50),
                    y: notification.y + Phaser.Math.Between(-30, 30),
                    duration: 2000,
                    yoyo: true,
                    repeat: -1,
                    ease: 'Sine.easeInOut'
                });
                
                // –ü—É–ª—å—Å–∞—Ü–∏—è
                this.tweens.add({
                    targets: notification,
                    scale: scale * 1.2,
                    duration: 800,
                    yoyo: true,
                    repeat: -1,
                    ease: 'Sine.easeInOut'
                });
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
        for (let i = 0; i < 5; i++) {
            this.time.delayedCall(1000 + i * 500, () => {
                const bubble = this.add.image(
                    Phaser.Math.Between(100, width - 100),
                    Phaser.Math.Between(height * 0.25, height * 0.5),
                    'message-bubble'
                );
                
                bubble.setAlpha(0);
                this.chaosElements.push(bubble);
                
                this.tweens.add({
                    targets: bubble,
                    alpha: 0.8,
                    y: bubble.y - 20,
                    duration: 400,
                    ease: 'Back.easeOut'
                });
                
                this.tweens.add({
                    targets: bubble,
                    alpha: 0,
                    y: bubble.y - 40,
                    delay: 2000,
                    duration: 500,
                    onComplete: () => bubble.destroy()
                });
            });
        }
    }
    
    createChoiceButtons(width, height) {
        const buttonWidth = Math.min(width * 0.35, 200);
        const buttonHeight = Math.min(height * 0.12, 80);
        const buttonY = height * 0.85;
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–Ω—è—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –∫—Ä–∞—Å–Ω–∞—è (–ø–ª–æ—Ö–æ–π –≤—ã–±–æ—Ä)
        const managerBtn = this.add.rectangle(
            width/2 - buttonWidth/2 - 20, 
            buttonY, 
            buttonWidth, 
            buttonHeight, 
            0xff6b35
        )
        .setInteractive({ useHandCursor: true })
        .on('pointerdown', () => this.chooseManager())
        .on('pointerover', () => {
            managerBtn.setFillStyle(0xdd5530);
            this.tweens.add({
                targets: managerBtn,
                scale: 1.05,
                duration: 150
            });
        })
        .on('pointerout', () => {
            managerBtn.setFillStyle(0xff6b35);
            this.tweens.add({
                targets: managerBtn,
                scale: 1,
                duration: 150
            });
        });
            
        this.add.text(width/2 - buttonWidth/2 - 20, buttonY, GAME_CONFIG.texts.scene1.choice1, {
            fontSize: Math.min(width, height) * 0.025 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#fff',
            align: 'center',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        
        // –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞" - –∑–µ–ª–µ–Ω–∞—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä)
        const botBtn = this.add.rectangle(
            width/2 + buttonWidth/2 + 20, 
            buttonY, 
            buttonWidth, 
            buttonHeight, 
            0x27ae60
        )
        .setInteractive({ useHandCursor: true })
        .on('pointerdown', () => this.chooseBot())
        .on('pointerover', () => {
            botBtn.setFillStyle(0x229954);
            this.tweens.add({
                targets: botBtn,
                scale: 1.05,
                duration: 150
            });
        })
        .on('pointerout', () => {
            botBtn.setFillStyle(0x27ae60);
            this.tweens.add({
                targets: botBtn,
                scale: 1,
                duration: 150
            });
        });
            
        this.add.text(width/2 + buttonWidth/2 + 20, buttonY, GAME_CONFIG.texts.scene1.choice2, {
            fontSize: Math.min(width, height) * 0.025 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#fff',
            align: 'center',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        const hint = this.add.text(width/2 + buttonWidth/2 + 20, buttonY - buttonHeight/2 - 25, 'ü§ñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è', {
            fontSize: Math.min(width, height) * 0.02 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#27ae60',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        
        // –ü—É–ª—å—Å–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.tweens.add({
            targets: hint,
            scale: { from: 1, to: 1.1 },
            duration: 1000,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
    }
    
    createUrgencyEffect() {
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ –≤—Å–ø—ã—à–∫–∞–º–∏ –ø–æ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞
        const { width, height } = this.scale;
        
        const urgencyOverlay = this.add.rectangle(width/2, height/2, width, height, 0xff0000, 0);
        
        this.tweens.add({
            targets: urgencyOverlay,
            alpha: { from: 0, to: 0.1 },
            duration: 2000,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });
    }
    
    chooseManager() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ö–∞–æ—Å–∞
        this.tweens.killAll();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showBadChoice();
    }
    
    chooseBot() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ö–∞–æ—Å–∞
        this.tweens.killAll();
        
        // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ö–∞–æ—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.chaosElements.forEach(element => {
            this.tweens.add({
                targets: element,
                alpha: 0,
                scale: 0,
                duration: 500,
                onComplete: () => element.destroy()
            });
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const player = this.children.getByName('player') || this.children.list.find(child => child.texture?.key === 'player');
        if (player) {
            this.tweens.add({
                targets: player,
                rotation: 0,
                scale: player.scale * 1.1,
                duration: 1000,
                ease: 'Back.easeOut'
            });
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        this.time.delayedCall(1500, () => {
            this.scene.start('Scene2');
        });
    }
    
    showBadChoice() {
        const { width, height } = this.scale;
        
        const overlay = this.add.rectangle(width/2, height/2, width, height, 0x000000, 0.7);
        
        const popup = this.add.rectangle(width/2, height/2, width * 0.8, height * 0.4, 0xffffff)
            .setStrokeStyle(4, 0xff4444);
            
        const text = this.add.text(width/2, height/2 - 40, 
            '–û–¥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —Å–ø–∞—Å–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é!\n–ö–ª–∏–µ–Ω—Ç—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞.\n\nüí∏ –ü–æ—Ç–µ—Ä–∏: -10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é\nüí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 30 000‚ÇΩ/–º–µ—Å', {
            fontSize: Math.min(width, height) * 0.03 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#333',
            align: 'center',
            lineSpacing: 8
        }).setOrigin(0.5);
        
        const tryAgainBtn = this.add.rectangle(width/2, height/2 + 60, 200, 50, 0x007acc)
            .setInteractive({ useHandCursor: true })
            .on('pointerdown', () => {
                overlay.destroy();
                popup.destroy();
                text.destroy();
                tryAgainBtn.destroy();
                tryAgainText.destroy();
                
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ö–∞–æ—Å–∞
                this.createChaosAnimation();
            })
            .on('pointerover', () => tryAgainBtn.setFillStyle(0x005fa3))
            .on('pointerout', () => tryAgainBtn.setFillStyle(0x007acc));
            
        const tryAgainText = this.add.text(width/2, height/2 + 60, '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', {
            fontSize: Math.min(width, height) * 0.025 + 'px',
            fontFamily: 'Arial, sans-serif',
            fill: '#fff',
            fontStyle: 'bold'
        }).setOrigin(0.5);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞
        popup.setScale(0);
        text.setScale(0);
        tryAgainBtn.setScale(0);
        tryAgainText.setScale(0);
        
        this.tweens.add({
            targets: [popup, text, tryAgainBtn, tryAgainText],
            scale: 1,
            duration: 400,
            ease: 'Back.easeOut',
            delay: 200
        });
    }
}
