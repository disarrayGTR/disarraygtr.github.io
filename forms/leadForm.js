// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Sheets –∏ Telegram
class LeadFormHandler {
    constructor() {
        this.form = null;
        this.isSubmitting = false;
        this.config = {
            // Google Apps Script –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            googleSheets: {
                deploymentId: 'AKfycbxwep6ng0s2AQF-MbQ1PwwTly82gOowqG_y665sft4EZTvGhAzrrD5XXjrr8zXf1k_iiw',
                webhookUrl: 'https://script.google.com/macros/s/AKfycbxwep6ng0s2AQF-MbQ1PwwTly82gOowqG_y665sft4EZTvGhAzrrD5XXjrr8zXf1k_iiw/exec',
                spreadsheetId: '1QdvmycbM8TDtU6e3FB0rG-eTmZLtOc4NZNxYTrRFn0I',
                enabled: true
            },
            // Telegram webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è  
            telegram: {
                webhookUrl: 'https://your-server.com/webhook/telegram', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à webhook URL
                botToken: '8464911334:AAGK_M9HU1VWp0nUcNgnBr3fEIlE-B-eI1c',
                chatId: null, // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                enabled: true
            },
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            fallback: {
                enabled: true,
                url: '/api/leads' // Endpoint –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
            }
        };
    }
    
    init() {
        this.form = document.getElementById('contactForm');
        if (!this.form) {
            console.error('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.setupValidation();
        
        console.log('üìã –§–æ—Ä–º–∞ –ª–∏–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏:', {
            googleSheets: this.config.googleSheets.enabled,
            telegram: this.config.telegram.enabled,
            fallback: this.config.fallback.enabled
        });
    }
    
    setupValidation() {
        const nameInput = document.getElementById('name');
        const phoneInput = document.getElementById('phone');
        const emailInput = document.getElementById('email');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        nameInput.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            if (value.length < 2) {
                this.setFieldError(nameInput, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            } else {
                this.clearFieldError(nameInput);
            }
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        phoneInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
            if (value.length > 0) {
                if (value.length <= 1) {
                    value = '+7';
                } else if (value.length <= 4) {
                    value = `+7 (${value.slice(1)}`;
                } else if (value.length <= 7) {
                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4)}`;
                } else if (value.length <= 9) {
                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7)}`;
                } else {
                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7, 9)}-${value.slice(9, 11)}`;
                }
            }
            
            e.target.value = value;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const phoneRegex = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/;
            if (value.length > 0 && !phoneRegex.test(value)) {
                this.setFieldError(phoneInput, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            } else {
                this.clearFieldError(phoneInput);
            }
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        emailInput.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            
            if (value.length > 0 && !emailRegex.test(value)) {
                this.setFieldError(emailInput, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            } else {
                this.clearFieldError(emailInput);
            }
        });
    }
    
    setFieldError(field, message) {
        field.style.borderColor = '#dc3545';
        
        const existingError = field.parentNode.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.style.color = '#dc3545';
        errorDiv.style.fontSize = '12px';
        errorDiv.style.marginTop = '5px';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }
    
    clearFieldError(field) {
        field.style.borderColor = '#e0e0e0';
        
        const errorMessage = field.parentNode.querySelector('.error-message');
        if (errorMessage) {
            errorMessage.remove();
        }
    }
    
    validateForm() {
        const name = document.getElementById('name').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const email = document.getElementById('email').value.trim();
        
        const errors = [];
        
        if (name.length < 2) {
            errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        }
        
        const phoneRegex = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/;
        if (!phoneRegex.test(phone)) {
            errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
        
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        }
        
        return errors;
    }
    
    async handleSubmit(e) {
        e.preventDefault();
        
        if (this.isSubmitting) {
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const errors = this.validateForm();
        if (errors.length > 0) {
            this.showMessage(errors.join('\n'), 'error');
            return;
        }
        
        this.isSubmitting = true;
        this.setSubmitButton(true);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            name: document.getElementById('name').value.trim(),
            phone: document.getElementById('phone').value.trim(),
            email: document.getElementById('email').value.trim(),
            timestamp: new Date().toISOString(),
            date: new Date().toLocaleDateString('ru-RU'),
            time: new Date().toLocaleTimeString('ru-RU'),
            source: 'automation-game',
            userAgent: navigator.userAgent,
            language: navigator.language,
            referrer: document.referrer || 'direct'
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', formData);
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            const results = await this.sendToAllChannels(formData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const successCount = results.filter(r => r.success).length;
            
            if (successCount > 0) {
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ ${successCount} –∫–∞–Ω–∞–ª(–æ–≤)`);
                this.showSuccess(results);
            } else {
                console.warn('‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
                this.saveToLocalStorage(formData);
                this.showMessage('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'warning');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            this.saveToLocalStorage(formData);
            this.showMessage('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
        } finally {
            this.isSubmitting = false;
            this.setSubmitButton(false);
        }
    }
    
    async sendToAllChannels(formData) {
        const results = [];
        
        // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets
        if (this.config.googleSheets.enabled) {
            try {
                const googleResult = await this.sendToGoogleSheets(formData);
                results.push({ channel: 'Google Sheets', success: googleResult, data: formData });
            } catch (error) {
                console.error('Google Sheets error:', error);
                results.push({ channel: 'Google Sheets', success: false, error: error.message });
            }
        }
        
        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram webhook
        if (this.config.telegram.enabled) {
            try {
                const telegramResult = await this.sendToTelegramWebhook(formData);
                results.push({ channel: 'Telegram Webhook', success: telegramResult, data: formData });
            } catch (error) {
                console.error('Telegram webhook error:', error);
                results.push({ channel: 'Telegram Webhook', success: false, error: error.message });
            }
        }
        
        // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram WebApp (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (window.automationGame) {
            try {
                const webappResult = await window.automationGame.sendToTelegram(formData);
                results.push({ channel: 'Telegram WebApp', success: webappResult, data: formData });
            } catch (error) {
                console.error('Telegram WebApp error:', error);
                results.push({ channel: 'Telegram WebApp', success: false, error: error.message });
            }
        }
        
        // 4. –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        if (this.config.fallback.enabled) {
            try {
                const fallbackResult = await this.sendToFallbackServer(formData);
                results.push({ channel: 'Fallback Server', success: fallbackResult, data: formData });
            } catch (error) {
                console.error('Fallback server error:', error);
                results.push({ channel: 'Fallback Server', success: false, error: error.message });
            }
        }
        
        return results;
    }
    
    async sendToGoogleSheets(formData) {
        console.log('üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets —á–µ—Ä–µ–∑ Google Apps Script...');

        const googleAppsScriptUrl = 'https://script.google.com/macros/s/AKfycbxwep6ng0s2AQF-MbQ1PwwTly82gOowqG_y665sft4EZTvGhAzrrD5XXjrr8zXf1k_iiw/exec';

        const response = await fetch(googleAppsScriptUrl, {
            method: 'POST',
            mode: 'no-cors', // Google Apps Script —Ç—Ä–µ–±—É–µ—Ç no-cors
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });

        // –° no-cors –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å response, –ø–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Apps Script');
        return true;
    }
    
    async sendToTelegramWebhook(formData) {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram webhook...');
        
        if (!this.config.telegram.webhookUrl || this.config.telegram.webhookUrl === 'https://your-server.com/webhook/telegram') {
            console.warn('‚ö†Ô∏è Telegram webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }
        
        const message = `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∏–≥—Ä—ã!*
        
üë§ *–ò–º—è:* ${formData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üìß *Email:* ${formData.email}

üìä *–î–µ—Ç–∞–ª–∏:*
üïê –í—Ä–µ–º—è: ${formData.date} ${formData.time}
üéÆ –ò—Å—Ç–æ—á–Ω–∏–∫: ${formData.source}
üåê –Ø–∑—ã–∫: ${formData.language}
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${this.getDeviceInfo(formData.userAgent)}

#–ª–∏–¥ #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #–∏–≥—Ä–∞`;
        
        const payload = {
            chat_id: this.config.telegram.chatId || '@your_channel',
            text: message,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', url: `tel:${formData.phone}` },
                        { text: 'üìß Email', url: `mailto:${formData.email}` }
                    ]
                ]
            }
        };
        
        const response = await fetch(this.config.telegram.webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });
        
        if (response.ok) {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            return true;
        } else {
            const error = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram webhook:', error);
            throw new Error(`Telegram webhook error: ${response.status}`);
        }
    }
    
    async sendToFallbackServer(formData) {
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...');
        
        const response = await fetch(this.config.fallback.url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });
        
        if (response.ok) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
            return true;
        } else {
            throw new Error(`Fallback server error: ${response.status}`);
        }
    }
    
    getDeviceInfo(userAgent) {
        if (/Mobile|Android|iPhone|iPad/i.test(userAgent)) {
            return '–ú–æ–±–∏–ª—å–Ω–æ–µ';
        } else if (/Tablet/i.test(userAgent)) {
            return '–ü–ª–∞–Ω—à–µ—Ç';
        } else {
            return '–î–µ—Å–∫—Ç–æ–ø';
        }
    }
    
    saveToLocalStorage(data) {
        const leads = JSON.parse(localStorage.getItem('automation-game-leads') || '[]');
        leads.push(data);
        localStorage.setItem('automation-game-leads', JSON.stringify(leads));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
    }
    
    setSubmitButton(disabled) {
        const button = document.getElementById('submitBtn');
        button.disabled = disabled;
        button.textContent = disabled ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
        
        if (disabled) {
            button.style.opacity = '0.7';
            button.style.cursor = 'not-allowed';
        } else {
            button.style.opacity = '1';
            button.style.cursor = 'pointer';
        }
    }
    
    showMessage(message, type = 'info') {
        const existingMessage = document.querySelector('.form-message');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `form-message ${type}`;
        messageDiv.style.cssText = `
            margin-top: 15px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-size: 14px;
            line-height: 1.4;
            ${type === 'error' ? 'background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;' : ''}
            ${type === 'success' ? 'background: #d4edda; color: #155724; border: 1px solid #c3e6cb;' : ''}
            ${type === 'warning' ? 'background: #fff3cd; color: #856404; border: 1px solid #ffeaa7;' : ''}
            ${type === 'info' ? 'background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb;' : ''}
        `;
        messageDiv.textContent = message;
        
        this.form.appendChild(messageDiv);
        
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.remove();
            }
        }, 7000);
    }
    
    showSuccess(results) {
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        this.form.style.display = 'none';
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const successfulChannels = results.filter(r => r.success).map(r => r.channel);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const successDiv = document.createElement('div');
        successDiv.style.cssText = `
            text-align: center;
            padding: 30px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 25px rgba(0,0,0,0.3);
        `;
        
        successDiv.innerHTML = `
            <div style="font-size: 48px; margin-bottom: 20px;">üéâ</div>
            <h3 style="color: #28a745; margin-bottom: 15px;">–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h3>
            <p style="color: #666; margin-bottom: 15px;">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!<br>
                –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.
            </p>
            <div style="background: #f8f9fa; padding: 10px; border-radius: 8px; margin: 15px 0; font-size: 12px; color: #666;">
                ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑: ${successfulChannels.join(', ')}
            </div>
            <button onclick="window.location.reload()" style="
                padding: 12px 24px;
                background: #28a745;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                margin-right: 10px;
            ">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            <button onclick="window.close()" style="
                padding: 12px 24px;
                background: #6c757d;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
            ">–ó–∞–∫—Ä—ã—Ç—å</button>
        `;
        
        const formContainer = document.getElementById('leadForm');
        formContainer.innerHTML = '';
        formContainer.appendChild(successDiv);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (window.gtag) {
            window.gtag('event', 'lead_submitted', {
                event_category: 'engagement',
                event_label: 'automation_game'
            });
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
let leadFormHandler;

function initLeadForm() {
    leadFormHandler = new LeadFormHandler();
    leadFormHandler.init();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.initLeadForm = initLeadForm;
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LeadFormHandler;
}
