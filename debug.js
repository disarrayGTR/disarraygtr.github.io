// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–≥—Ä—ã
class GameDebugger {
    constructor() {
        this.isEnabled = localStorage.getItem('debug-mode') === 'true';
        this.logBuffer = [];
        this.maxLogs = 200;
        
        if (this.isEnabled) {
            this.init();
        }
    }

    init() {
        console.log('üîç Debug mode enabled');
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        this.interceptConsole();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ª–∞–¥–∫–∏
        window.debugGame = this;
        window.enableDebug = () => this.enable();
        window.disableDebug = () => this.disable();
        window.showGameStats = () => this.showStats();
        window.downloadLogs = () => this.downloadLogs();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.startPerformanceMonitoring();
    }

    enable() {
        localStorage.setItem('debug-mode', 'true');
        this.isEnabled = true;
        console.log('üîç Debug mode enabled - refresh page to apply');
    }

    disable() {
        localStorage.setItem('debug-mode', 'false');
        this.isEnabled = false;
        console.log('üîç Debug mode disabled');
    }

    interceptConsole() {
        const originalLog = console.log;
        const originalError = console.error;
        const originalWarn = console.warn;

        console.log = (...args) => {
            this.addLog('log', args);
            originalLog.apply(console, args);
        };

        console.error = (...args) => {
            this.addLog('error', args);
            originalError.apply(console, args);
        };

        console.warn = (...args) => {
            this.addLog('warn', args);
            originalWarn.apply(console, args);
        };
    }

    addLog(level, args) {
        const logEntry = {
            timestamp: Date.now(),
            level,
            message: args.map(arg => 
                typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
            ).join(' ')
        };

        this.logBuffer.push(logEntry);

        // ÔøΩÔøΩ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if (this.logBuffer.length > this.maxLogs) {
            this.logBuffer.shift();
        }
    }

    showStats() {
        const stats = {
            gameInitialized: window.automationGame?.isInitialized || false,
            telegramAvailable: !!window.Telegram?.WebApp,
            phaserVersion: window.Phaser?.VERSION || 'unknown',
            gameEvents: this.getStoredEvents('game-events'),
            telegramEvents: this.getStoredEvents('telegram-events'),
            savedLeads: this.getStoredEvents('automation-game-leads'),
            performance: this.getPerformanceData(),
            errors: this.getErrorSummary()
        };

        console.table(stats);
        return stats;
    }

    getStoredEvents(key) {
        try {
            const events = JSON.parse(localStorage.getItem(key) || '[]');
            return {
                count: events.length,
                latest: events[events.length - 1]?.timestamp || null
            };
        } catch (e) {
            return { count: 0, latest: null };
        }
    }

    getPerformanceData() {
        if (performance && performance.timing) {
            const timing = performance.timing;
            return {
                pageLoadTime: timing.loadEventEnd - timing.navigationStart,
                domReady: timing.domContentLoadedEventEnd - timing.navigationStart,
                firstPaint: performance.getEntriesByType('paint')
                    .find(entry => entry.name === 'first-paint')?.startTime || 'unknown'
            };
        }
        return { error: 'Performance API not available' };
    }

    getErrorSummary() {
        const errors = this.logBuffer.filter(log => log.level === 'error');
        return {
            totalErrors: errors.length,
            recentErrors: errors.slice(-5).map(err => ({
                time: new Date(err.timestamp).toLocaleTimeString(),
                message: err.message.substring(0, 100)
            }))
        };
    }

    downloadLogs() {
        const data = {
            debugLogs: this.logBuffer,
            gameEvents: this.getFullStoredEvents('game-events'),
            telegramEvents: this.getFullStoredEvents('telegram-events'),
            leads: this.getFullStoredEvents('automation-game-leads'),
            stats: this.showStats(),
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString()
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `game-debug-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        console.log('üìÅ Debug logs downloaded');
    }

    getFullStoredEvents(key) {
        try {
            return JSON.parse(localStorage.getItem(key) || '[]');
        } catch (e) {
            return [];
        }
    }

    startPerformanceMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (window.requestAnimationFrame) {
            let frameCount = 0;
            let lastTime = performance.now();

            const countFPS = () => {
                frameCount++;
                const currentTime = performance.now();
                
                if (currentTime - lastTime >= 1000) {
                    const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ localStorage –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    const fpsHistory = JSON.parse(localStorage.getItem('fps-history') || '[]');
                    fpsHistory.push({ timestamp: Date.now(), fps });
                    
                    if (fpsHistory.length > 60) { // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                        fpsHistory.shift();
                    }
                    
                    localStorage.setItem('fps-history', JSON.stringify(fpsHistory));
                    
                    frameCount = 0;
                    lastTime = currentTime;
                    
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º FPS
                    if (fps < 30) {
                        console.warn(`‚ö†Ô∏è Low FPS detected: ${fps}`);
                    }
                }
                
                requestAnimationFrame(countFPS);
            };

            requestAnimationFrame(countFPS);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω –∏–≥—Ä—ã
    testAllScenes() {
        if (!window.automationGame?.game) {
            console.error('Game not initialized');
            return;
        }

        const scenes = ['Scene1', 'Scene2', 'Scene3', 'Scene4', 'Scene5'];
        let currentScene = 0;

        const testNext = () => {
            if (currentScene < scenes.length) {
                console.log(`Testing scene: ${scenes[currentScene]}`);
                window.automationGame.game.scene.start(scenes[currentScene]);
                currentScene++;
                setTimeout(testNext, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å—Ü–µ–Ω—É
            } else {
                console.log('‚úÖ All scenes tested');
            }
        };

        testNext();
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    simulateFormFill() {
        const nameField = document.getElementById('name');
        const phoneField = document.getElementById('phone');
        const emailField = document.getElementById('email');

        if (nameField && phoneField && emailField) {
            nameField.value = '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤';
            phoneField.value = '+7 (999) 123-45-67';
            emailField.value = 'test@example.com';

            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            nameField.dispatchEvent(new Event('input'));
            phoneField.dispatchEvent(new Event('input'));
            emailField.dispatchEvent(new Event('input'));

            console.log('üìù Form filled with test data');
        } else {
            console.warn('Form fields not found');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞
const gameDebugger = new GameDebugger();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ –≤ development
if (location.hostname === 'localhost' || location.hostname === '127.0.0.1') {
    gameDebugger.enable();
}

console.log(`
üéÆ Game Debugger loaded
Commands:
- enableDebug() - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
- disableDebug() - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É  
- showGameStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
- downloadLogs() - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏
- debugGame.testAllScenes() - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã
- debugGame.simulateFormFill() - –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
`);
